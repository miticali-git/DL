# -*- coding: utf-8 -*-
"""App.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bHWIGMV8PBh5QITlznoUZuQudL4CoOI3
"""

import streamlit as st
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow import keras

# Carregando o modelo treinado
model = keras.models.load_model('/content/drive/MyDrive/Deep Learning_Glasses_No_glasses/Modelos/Data Augmentation')

# Função de pré-processamento da imagem
def preprocess_image(image):
    # Redimensionando a imagem para o tamanho esperado pelo modelo
    image = image.resize((150, 150))
    # Convertendo a imagem para um array numpy
    image = np.array(image)
    # Normalizando os valores dos pixels para o intervalo [0, 1]
    image = image / 255.0
    # Adicionando uma dimensão extra para representar o batch de imagens
    image = np.expand_dims(image, axis=0)
    return image

# Função de predição
def predict(image):
    # Pré-processando a imagem
    processed_image = preprocess_image(image)
    # Fazendo a predição utilizando o modelo
    predictions = model.predict(processed_image)
    # Obtendo a classe predita
    predicted_class = np.argmax(predictions[0])
    return predicted_class

# Configurando a página do Streamlit
st.title('Teste de Classificação de Imagens')
st.write('Faça o upload de uma imagem para testar o modelo.')

# Fazendo o upload da imagem
uploaded_file = st.file_uploader('Escolha uma imagem', type=['png', 'jpg', 'jpeg'])

# Verificando se uma imagem foi enviada
if uploaded_file is not None:
    # Carregando a imagem
    image = Image.open(uploaded_file)
    # Exibindo a imagem na interface
    st.image(image, caption='Imagem enviada', use_column_width=True)
    # Fazendo a predição utilizando o modelo
    predicted_class = predict(image)
    # Exibindo o resultado da predição
    st.write('Classe predita:', predicted_class)